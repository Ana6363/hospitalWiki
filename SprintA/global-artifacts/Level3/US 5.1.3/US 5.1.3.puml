@startuml
autonumber
skinparam packageStyle rect

title OAuth Callback Handling and User Activation

actor "OAuth Service" as OAuthService
participant "HandleOAuthCallbackAsync" as HandleOAuth <<component>>
database "User Database" as DB <<component>>
participant "UserMapper" as Mapper <<component>>
participant "ActivateUserAsync" as ActivateUser <<component>>
participant "Email Service" as EmailService <<component>>

OAuthService -> HandleOAuth : Call HandleOAuthCallbackAsync(code)

HandleOAuth -> OAuthService : ExchangeCodeForTokensAsync(code)
OAuthService --> HandleOAuth : tokenResponse

HandleOAuth -> OAuthService : ValidateToken(tokenResponse.IdToken)
OAuthService --> HandleOAuth : payload (contains email)

HandleOAuth -> DB : Check if user exists by email
DB --> HandleOAuth : userDataModel

alt User not found
    HandleOAuth --> OAuthService : Return (false, null, null, "User not in the system. An admin has to register the user.")
else User exists
    HandleOAuth -> Mapper : Map userDataModel to domain object
    Mapper --> HandleOAuth : existingUser (domain object)

    alt User is inactive
        HandleOAuth -> ActivateUser : Call SendActivationEmailAsync(existingUser.Id.AsString())
        ActivateUser -> DB : Fetch userDataModel by email
        DB --> ActivateUser : userDataModel

        alt User exists in DB
            ActivateUser -> EmailService : Send activation email
            EmailService --> ActivateUser : Email sent
            ActivateUser --> HandleOAuth : Email sent
        else User not found
            ActivateUser -> ActivateUser : Throws Exception("User not found.")
        end

        HandleOAuth --> OAuthService : Return (false, null, null, "User is inactive. An activation email has been sent.")
    else User is active
        HandleOAuth --> OAuthService : Return (true, existingUser.Role, existingUser.Id.AsString(), "User is active")
    end
end

== User Activation Flow ==

actor "User" as User
User -> ActivateUser : Call ActivateUserAsync(token)

ActivateUser -> DB : Query for user by activation token
DB --> ActivateUser : userDataModel

alt User not found or invalid token
    ActivateUser -> ActivateUser : Throws Exception("Invalid token or user not found.")
else User found
    alt User already active
        ActivateUser -> ActivateUser : Throws Exception("User is already active.")
    else Token expired
        ActivateUser -> ActivateUser : Throws Exception("Activation token has expired. Please request a new one.")
    else Valid token
        ActivateUser -> ActivateUser : Mark user as active
        ActivateUser -> ActivateUser : Clear activation token and expiration
        ActivateUser -> Mapper : Map updated user to UserDataModel
        Mapper --> ActivateUser : updatedUserDataModel

        ActivateUser -> DB : Update user in database
        DB --> ActivateUser : Save successful
        ActivateUser --> User : User activated successfully
    end
end
@enduml